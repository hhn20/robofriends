{"version":3,"sources":["Component/Searchbox.js","Component/Card.js","Component/Cardlist.js","Component/Scroll.js","Container/App.js","serviceWorker.js","index.js"],"names":["Searchbox","change","type","placeholder","onChange","Card","id","name","a","className","alt","src","Cardlist","robots","map","i","key","Scroll","props","style","overflow","border","height","children","App","onsearchange","event","setState","searchfield","target","value","console","log","state","fetch","then","response","json","users","filtered","this","filter","robot","toLowerCase","includes","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ade64bf8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Searchbox = ({change}) =>\r\n{\r\nreturn(\r\n<div>\r\n<input type=\"searchbox\" \r\nplaceholder=\"search\"\r\nonChange={change}/>\r\n</div>\r\n);\r\n\r\n\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport 'tachyons';\r\nconst Card = ({id,name}) =>\r\n{\r\nvar a=`https://robohash.org/${id}?size=200x200`;\r\nreturn(\r\n<div className='bg-light-red tc dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n<img alt=\"robots\" src={a}/>\r\n<h4>{id}</h4>\r\n<p>{name}</p>\r\n</div>\r\n);\r\n\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst Cardlist = ({robots}) =>\r\n{\r\nreturn(\r\nrobots.map((a,i)=>{\r\n  return(\r\n    <Card key={a.id} id={a.id} name={a.name} />\r\n  );\r\n})) \r\n}  \r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nfunction Scroll(props)\r\n{\r\n    return(\r\n\r\n        <div style={{overflow:'scroll', border:'5px solid black', height:'615px' }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport Searchbox from '../Component/Searchbox'\r\nimport Cardlist from '../Component/Cardlist';\r\nimport 'tachyons';\r\nimport Scroll from '../Component/Scroll';\r\nclass App extends Component\r\n{\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n          robots: [],\r\n          searchfield: ''\r\n        }\r\n      }\r\n    \r\n    componentDidMount()\r\n    {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())  \r\n        .then(users => this.setState({robots:users}))\r\n\r\n\r\n\r\n\r\n    }\r\n\r\nonsearchange = (event) =>\r\n{\r\nthis.setState({searchfield:event.target.value});\r\nconsole.log(this.state.searchfield);\r\n}\r\n\r\nrender(){  \r\n\r\nconst filtered=this.state.robots.filter(robot =>{\r\n    return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\r\n    })  \r\n\r\nreturn(\r\n<div className=\"tc\">\r\n<h1>ROBOFRIENDS</h1>\r\n<Searchbox change={this.onsearchange} />\r\n<Scroll>\r\n<Cardlist robots={filtered} />\r\n</Scroll>\r\n</div>\r\n)\r\n} \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n <App/> ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}